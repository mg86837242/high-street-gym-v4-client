/* 0. Bear in mind that `!important` can be added in these layers */
/* 1. Tailwind Base Layer */
@tailwind base;
/* 1.1 Import Vite's default CSS as the base layer, as a consequence, ONLY `@import` can be used here in `index.css`, see: */
/*  -- https://stackoverflow.com/questions/69746121/using-nextjs-how-can-you-import-in-css-using-tailwind-css */
/*  -- https://tailwindcss.com/docs/using-with-preprocessors#build-time-imports */
/* 1.2 However, `@import` is strongly discouraged, see: https://www.debugbear.com/blog/avoid-css-import, so just paste into the base layer */
/* 1.3 Base styles definition also factors in: https://www.freecodecamp.org/news/html-page-width-height/ */
/* 1.4 `@layer` is intentionally avoided here, reasons generally related to tree-shaking, */
/*  see: https://tailwindcss.com/docs/adding-custom-styles#using-css-and-layer */
/* NB 1.5 Tailwind has alreayd provided out-of-the-box base styles, see: https://tailwindcss.com/docs/preflight, in which `box-sizing: border-box` is claimed to be made default, see: https://tailwindcss.com/docs/box-sizing#including-borders-and-padding */
/* 1.6 The following base style enables a colored border to help with styling the box model & flex & grid & etc. */
/* #main-element-wrapper * {
  @apply border-[1px] border-rose-500/50;
} */

html {
  @apply font-sans font-normal leading-normal m-0 p-0;
  text-rendering: optimizeLegibility;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  -webkit-text-size-adjust: 100%;
}

html,
body,
#root {
  @apply h-full w-full;
}

h1 {
  @apply text-primary font-headline text-5xl leading-tight mb-2;
}

h2 {
  @apply text-secondary font-sans text-4xl font-black;
}

p {
  @apply text-sm;
}

/* 2. Tailwind Components Layer */
@tailwind components;

/* 3. Tailwind Utilities Layer */
@tailwind utilities;
/* 3.1 Based on experimentation, theme defined in `tailwind.config.cjs` has LOWER precedence than what's defined in */
/* the utilities layer, (however, higher precedence than components layer) e.g.: */
/* .font-heading {
    font-family: Arial;
} */

/* 2.1 Customize daisyUI components, see: https://github.com/saadeghi/daisyui/discussions/893 */
@layer components {
  /* PS `text-transform` is already removed in button components in the `UI` folder */
  .btn {
    text-transform: none;
  }
}

/* 2.2 CSS animations */
@layer components {
  .animate {
    animation-duration: 0.5s;
    animation-name: animate-fade;
    animation-delay: 0.5s;
    animation-fill-mode: backwards;
  }

  @keyframes animate-fade {
    0% {
      opacity: 0;
    }
    100% {
      opacity: 1;
    }
  }

  .animate.pop {
    animation-name: animate-pop;
    animation-timing-function: cubic-bezier(0.26, 0.53, 0.74, 1.48);
  }

  @keyframes animate-pop {
    0% {
      opacity: 0;
      transform: scale(0.5, 0.5);
    }

    100% {
      opacity: 1;
      transform: scale(1, 1);
    }
  }

  .delay-1 {
    animation-delay: 0.6s;
  }

  .delay-2 {
    animation-delay: 0.7s;
  }

  .delay-3 {
    animation-delay: 0.8s;
  }

  .loading-spinner {
    --square: 26px;
    --offset: 30px;

    --duration: 2.4s;
    --delay: 0.2s;
    --timing-function: ease-in-out;

    --in-duration: 0.4s;
    --in-delay: 0.1s;
    --in-timing-function: ease-out;

    width: calc(3 * var(--offset) + var(--square));
    height: calc(2 * var(--offset) + var(--square));
    padding: 0px;
    margin-left: auto;
    margin-right: auto;
    position: relative;
  }

  .loading-spinner div {
    @apply bg-secondary;
    display: inline-block;
    border: none;
    border-radius: 2px;
    width: var(--square);
    height: var(--square);
    position: absolute;
    padding: 0px;
    margin: 0px;
    font-size: 6pt;
    color: black;
  }

  .loading-spinner #square1 {
    left: calc(0 * var(--offset));
    top: calc(0 * var(--offset));
    animation: square1 var(--duration) var(--delay) var(--timing-function) infinite,
      squarefadein var(--in-duration) calc(1 * var(--in-delay)) var(--in-timing-function) both;
  }

  .loading-spinner #square2 {
    left: calc(0 * var(--offset));
    top: calc(1 * var(--offset));
    animation: square2 var(--duration) var(--delay) var(--timing-function) infinite,
      squarefadein var(--in-duration) calc(1 * var(--in-delay)) var(--in-timing-function) both;
  }

  .loading-spinner #square3 {
    left: calc(1 * var(--offset));
    top: calc(1 * var(--offset));
    animation: square3 var(--duration) var(--delay) var(--timing-function) infinite,
      squarefadein var(--in-duration) calc(2 * var(--in-delay)) var(--in-timing-function) both;
  }

  .loading-spinner #square4 {
    left: calc(2 * var(--offset));
    top: calc(1 * var(--offset));
    animation: square4 var(--duration) var(--delay) var(--timing-function) infinite,
      squarefadein var(--in-duration) calc(3 * var(--in-delay)) var(--in-timing-function) both;
  }

  .loading-spinner #square5 {
    left: calc(3 * var(--offset));
    top: calc(1 * var(--offset));
    animation: square5 var(--duration) var(--delay) var(--timing-function) infinite,
      squarefadein var(--in-duration) calc(4 * var(--in-delay)) var(--in-timing-function) both;
  }

  @keyframes square1 {
    0% {
      left: calc(0 * var(--offset));
      top: calc(0 * var(--offset));
    }
    8.333% {
      left: calc(0 * var(--offset));
      top: calc(1 * var(--offset));
    }
    100% {
      left: calc(0 * var(--offset));
      top: calc(1 * var(--offset));
    }
  }

  @keyframes square2 {
    0% {
      left: calc(0 * var(--offset));
      top: calc(1 * var(--offset));
    }
    8.333% {
      left: calc(0 * var(--offset));
      top: calc(2 * var(--offset));
    }
    16.67% {
      left: calc(1 * var(--offset));
      top: calc(2 * var(--offset));
    }
    25.00% {
      left: calc(1 * var(--offset));
      top: calc(1 * var(--offset));
    }
    83.33% {
      left: calc(1 * var(--offset));
      top: calc(1 * var(--offset));
    }
    91.67% {
      left: calc(1 * var(--offset));
      top: calc(0 * var(--offset));
    }
    100% {
      left: calc(0 * var(--offset));
      top: calc(0 * var(--offset));
    }
  }

  @keyframes square3 {
    0%,
    100% {
      left: calc(1 * var(--offset));
      top: calc(1 * var(--offset));
    }
    16.67% {
      left: calc(1 * var(--offset));
      top: calc(1 * var(--offset));
    }
    25.00% {
      left: calc(1 * var(--offset));
      top: calc(0 * var(--offset));
    }
    33.33% {
      left: calc(2 * var(--offset));
      top: calc(0 * var(--offset));
    }
    41.67% {
      left: calc(2 * var(--offset));
      top: calc(1 * var(--offset));
    }
    66.67% {
      left: calc(2 * var(--offset));
      top: calc(1 * var(--offset));
    }
    75.00% {
      left: calc(2 * var(--offset));
      top: calc(2 * var(--offset));
    }
    83.33% {
      left: calc(1 * var(--offset));
      top: calc(2 * var(--offset));
    }
    91.67% {
      left: calc(1 * var(--offset));
      top: calc(1 * var(--offset));
    }
  }

  @keyframes square4 {
    0% {
      left: calc(2 * var(--offset));
      top: calc(1 * var(--offset));
    }
    33.33% {
      left: calc(2 * var(--offset));
      top: calc(1 * var(--offset));
    }
    41.67% {
      left: calc(2 * var(--offset));
      top: calc(2 * var(--offset));
    }
    50.00% {
      left: calc(3 * var(--offset));
      top: calc(2 * var(--offset));
    }
    58.33% {
      left: calc(3 * var(--offset));
      top: calc(1 * var(--offset));
    }
    100% {
      left: calc(3 * var(--offset));
      top: calc(1 * var(--offset));
    }
  }

  @keyframes square5 {
    0% {
      left: calc(3 * var(--offset));
      top: calc(1 * var(--offset));
    }
    50.00% {
      left: calc(3 * var(--offset));
      top: calc(1 * var(--offset));
    }
    58.33% {
      left: calc(3 * var(--offset));
      top: calc(0 * var(--offset));
    }
    66.67% {
      left: calc(2 * var(--offset));
      top: calc(0 * var(--offset));
    }
    75.00% {
      left: calc(2 * var(--offset));
      top: calc(1 * var(--offset));
    }
    100% {
      left: calc(2 * var(--offset));
      top: calc(1 * var(--offset));
    }
  }

  @keyframes squarefadein {
    0% {
      transform: scale(0.75);
      opacity: 0;
    }
    100% {
      transform: scale(1);
      opacity: 1;
    }
  }
}
